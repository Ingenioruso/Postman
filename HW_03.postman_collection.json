{
	"info": {
		"_postman_id": "54113db8-4998-4557-ae3f-3ef814a382ca",
		"name": "Postman_HW_03",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26788729"
	},
	"item": [
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1) Залогиниться. Приходящий токен необходимо передать во все остальные запросы.\r",
							"var jsonData = pm.response.json()\r",
							"pm.environment.set(\"token\", jsonData.token)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "hermes",
							"type": "text"
						},
						{
							"key": "password",
							"value": "12345",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/login",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1) Статус код 200\r",
							"const respData = pm.response.json()\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//2) Проверка структуры json в ответе\r",
							"var schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"person\": {\r",
							"            \"type\": \"object\",\r",
							"            \"properties\": {\r",
							"                \"u_age\": {\"type\": \"integer\"},\r",
							"                \"u_name\": {\"type\": \"array\",\r",
							"                           \"items\": [\r",
							"                               {\"type\": \"string\"},\r",
							"                               {\"type\": \"integer\"},\r",
							"                               {\"type\": \"integer\"},\r",
							"                           ]},\r",
							"                \"u_salary_1_5_year\": {\"type\": \"integer\"},\r",
							"            },\r",
							"            \"required\": [\"u_age\", \"u_name\", \"u_salary_1_5_year\"]\r",
							"        },\r",
							"        \"qa_salary_after_12_months\": {\"type\": \"integer\"},\r",
							"        \"qa_salary_after_6_months\": {\"type\": \"integer\"},\r",
							"        \"start_qa_salary\": {\"type\": \"number\"}\r",
							"       },\r",
							"    \"required\": [\"person\", \"qa_salary_after_12_months\", \"qa_salary_after_6_months\", \"start_qa_salary\"]\r",
							"};\r",
							"\r",
							"// pm.test('Schema is valid', function () {\r",
							"//     pm.expect(tv4.validate(respData, schema)).to.be.true;\r",
							"//    });\r",
							"\r",
							"pm.test('Schema is valid var2', function () {\r",
							"    pm.expect(respData).to.be.jsonSchema(schema);\r",
							"   });\r",
							"\r",
							"//3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент\r",
							"var request = JSON.parse(request.data)\r",
							"\r",
							"pm.test(\"qa_salary_after_6_months': salary * 2\", function (){\r",
							"    pm.expect(respData.qa_salary_after_6_months).to.eql(request.salary*2)\r",
							"})\r",
							"\r",
							"pm.test(\"qa_salary_after_12_months': salary * 2.9\", function (){\r",
							"    pm.expect(respData.qa_salary_after_12_months).to.eql(request.salary*2.9)\r",
							"})\r",
							"\r",
							"pm.test(\"u_salary_1_5_year': salary * 4\", function (){\r",
							"    pm.expect(respData.person.u_salary_1_5_year).to.eql(request.salary*4)\r",
							"})\r",
							"\r",
							"//4) Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса http://162.55.220.72:5005/get_test_user\r",
							"\r",
							"pm.environment.set(\"u_salary_1_5_year\", respData.person.u_salary_1_5_year)\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"age\": 39,\r\n    \"salary\": 150000,\r\n    \"name\": \"Vladimir\",\r\n    \"auth_token\": \"{{token}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info - get_test_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "salary",
							"value": "{{u_salary_1_5_year}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/get_test_user",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "new_data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1) Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//2) Проверка структуры json в ответе\r",
							"\r",
							"const respData = pm.response.json()\r",
							"\r",
							"var schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"age\": {\"type\": \"number\"},\r",
							"        \"name\": {\"type\": \"string\"},\r",
							"        \"salary\": {\"type\": \"array\" [\r",
							"            {\"type\": \"number\"},\r",
							"            {\"type\": \"string\"},\r",
							"            {\"type\": \"string\"}\r",
							"        ]}\r",
							"    },\r",
							"    \"required\": [\"age\", \"name\", \"salary\"]\r",
							"}\r",
							"\r",
							"pm.test(\"Schema is valid\", function () {\r",
							"    pm.response.to.be.jsonSchema(schema);\r",
							"    })\r",
							"\r",
							"// pm.test('Schema is valid tv', function () {\r",
							"//     pm.expect(tv4.validate(respData, schema)).to.be.true;\r",
							"//    });\r",
							"\r",
							"//3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"\r",
							"var request = request.data\r",
							"\r",
							"pm.test('salary*2', function () {\r",
							"    pm.expect(+respData.salary[1]).to.eql(request.salary*2)\r",
							"})\r",
							"\r",
							"pm.test('salary*3', function () {\r",
							"    pm.expect(+respData.salary[2]).to.eql(request.salary*3)\r",
							"})\r",
							"\r",
							"//4) проверить, что 2-й элемент массива salary больше 1-го и 0-го\r",
							"pm.test(\"Проверка второго элемента массива salary\", function () {\r",
							"    pm.expect(+respData.salary[2]).to.be.greaterThan(respData.salary[0]);\r",
							"    pm.expect(+respData.salary[2]).to.be.greaterThan(+respData.salary[1]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "39",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "150000",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Vladimir",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/new_data",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "test_pet_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1) Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//2) Проверка структуры json в ответе\r",
							"\r",
							"let respData = pm.response.json()\r",
							"\r",
							"let schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"age\": {\"type\": \"number\"},\r",
							"        \"daily_food\": {\"type\": \"number\"},\r",
							"        \"daily_sleep\": {\"type\": \"number\"},\r",
							"        \"name\": {\"type\": \"string\"}\r",
							"    },\r",
							"    \"required\": [\"age\", \"daily_food\", \"daily_sleep\", \"name\"]\r",
							"}\r",
							"\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.expect(respData).to.be.jsonSchema(schema)\r",
							"})\r",
							"\r",
							"//3) В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"\r",
							"var request = request.data\r",
							"\r",
							"pm.test(\"daily_food':weight * 0.012\", function () {\r",
							"    pm.expect(respData.daily_food).to.be.eql(request.weight*0.012)\r",
							"})\r",
							"\r",
							"pm.test(\"daily_sleep': weight * 2.5\", function () {\r",
							"    pm.expect(respData.daily_sleep).to.be.eql(request.weight*2.5)\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "49",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "63",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Vladimir",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/test_pet_info",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "get_test_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1) Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//2) Проверка структуры json в ответе.\r",
							"\r",
							"var respData = pm.response.json()\r",
							"\r",
							"var schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"age\": {\"type\": \"string\"},\r",
							"        \"family\": {\r",
							"            \"type\": \"object\",\r",
							"            \"properties\": {\r",
							"                \"children\": {\"type\": \"array\" [\r",
							"                    {\"type\": \"string\"},\r",
							"                    {\"type\": \"number\"},\r",
							"                    {\"type\": \"string\"},\r",
							"                    {\"type\": \"number\"}\r",
							"                ]},\r",
							"                \"u_salary_1_5_year\": {\"type\": \"number\"}\r",
							"            },\r",
							"            \"required\":[\"children\", \"u_salary_1_5_year\"]\r",
							"        },\r",
							"        \"name\": {\"type\": \"string\"},\r",
							"        \"salary\": {\"type\": \"number\"}\r",
							"    },\r",
							"    \"required\": [\"age\", \"family\", \"name\", \"salary\"]\r",
							"}\r",
							"\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.expect(respData).to.be.jsonSchema(schema)\r",
							"})\r",
							"\r",
							"//3) Проверить что значение поля name = значению переменной name из окружения\r",
							"\r",
							"pm.test('resp.name = environment.name', function () {\r",
							"    pm.expect(respData.name).to.be.eql(pm.environment.get(\"name\"))\r",
							"})\r",
							"\r",
							"//4) Проверить что значение поля age в ответе соответсвует отправленному в запросе значению поля age\r",
							"var request = request.data\r",
							"\r",
							"pm.test('resp.age=req.name', function () {\r",
							"    pm.expect(respData.age).to.be.eql(request.age)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "39",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "150000",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Vladimir",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/get_test_user",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "currency",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1) Можете взять любой объект из присланного списка, используйте js random.\r",
							"//В объекте возьмите Cur_ID и передать через окружение в следующий запрос.\r",
							"\r",
							"var respData = pm.response.json()\r",
							"\r",
							"var randomIndex = Math.floor(Math.random() * respData.length);\r",
							"\r",
							"var randomObject = respData[randomIndex];\r",
							"\r",
							"pm.environment.set('Cur_ID', randomObject.Cur_ID)\r",
							"\r",
							"console.log(randomObject.Cur_ID)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						},
						{
							"key": "curr_code",
							"value": "5",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://54.157.99.22:80/currency",
					"protocol": "http",
					"host": [
						"54",
						"157",
						"99",
						"22"
					],
					"port": "80",
					"path": [
						"currency"
					]
				}
			},
			"response": []
		},
		{
			"name": "curr_byn",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1) Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//2) Проверка структуры json в ответе.\r",
							"\r",
							"var respData = pm.response.json()\r",
							"\r",
							"var schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"Cur_Abbreviation\": {\"type\": \"string\"},\r",
							"        \"Cur_ID\": {\"type\": \"number\"},\r",
							"        \"Cur_Name\": {\"type\": \"string\"},\r",
							"        \"Cur_OfficialRate\": {\"type\": \"number\"},\r",
							"        \"Cur_Scale\": {\"type\": \"number\"},\r",
							"        \"Date\": {\"type\": \"string\"}\r",
							"    },\r",
							"    \"required\": [\"Cur_Abbreviation\", \"Cur_ID\", \"Cur_Name\", \"Cur_OfficialRate\", \"Cur_Scale\", \"Date\"]\r",
							"    }\r",
							"\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.expect(respData).to.be.jsonSchema(schema)\r",
							"})\r",
							"\r",
							"// ***\r",
							"// 1) получить список валют\r",
							"// 2) итерировать список валют\r",
							"// 3) в каждой итерации отправлять запрос на сервер для получения курса каждой валюты\r",
							"// 4) если возвращается 500 код, переходим к следующей итреации\r",
							"// 5) если получаем 200 код, проверяем response json на наличие поля \"Cur_OfficialRate\"\r",
							"// 6) если поле есть, пишем в консоль инфу про фалюту в виде response\r",
							"// {\r",
							"//     \"Cur_Abbreviation\": str\r",
							"//     \"Cur_ID\": int,\r",
							"//     \"Cur_Name\": str,\r",
							"//     \"Cur_OfficialRate\": float,\r",
							"//     \"Cur_Scale\": int,\r",
							"//     \"Date\": str\r",
							"// }\r",
							"// 7) переходим к следующей итерации\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						},
						{
							"key": "curr_code",
							"value": "{{Cur_ID}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://54.157.99.22:80/curr_byn",
					"protocol": "http",
					"host": [
						"54",
						"157",
						"99",
						"22"
					],
					"port": "80",
					"path": [
						"curr_byn"
					]
				}
			},
			"response": []
		}
	]
}